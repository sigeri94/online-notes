#!/bin/bash

# Output XML file
output_file="file_info_dump.xml"

# Function to generate XML for a single file
generate_xml() {
    local file=$1

    if [[ -e $file ]]; then
        # Get ownership and permission information
        owner=$(ls -l "$file" | awk '{print $3}')
        group=$(ls -l "$file" | awk '{print $4}')
        permissions=$(stat -c "%a" "$file")

        # Read file content
        content=$(cat "$file" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g;')

        # Write file data to XML
        echo "  <file path=\"$file\">" >> "$output_file"
        echo "    <owner>$owner</owner>" >> "$output_file"
        echo "    <group>$group</group>" >> "$output_file"
        echo "    <permissions>$permissions</permissions>" >> "$output_file"
        echo "    <content><![CDATA[$content]]></content>" >> "$output_file"
        echo "  </file>" >> "$output_file"
    else
        echo "  <file path=\"$file\">" >> "$output_file"
        echo "    <error>File not found</error>" >> "$output_file"
        echo "  </file>" >> "$output_file"
    fi
}

# Start XML structure
echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$output_file"
echo "<files>" >> "$output_file"

# Process each file
files=("/etc/passwd" "/etc/group" "/etc/ssh/sshd_config")
for file in "${files[@]}"; do
    generate_xml "$file"
done

# Close XML structure
echo "</files>" >> "$output_file"

echo "File information dumped to $output_file."

----
<?xml version="1.0" encoding="UTF-8"?>
<controls>
  <control>
    <id>mbss-rhel7-001</id>
    <description>Check SSH root login</description>
    <file>/etc/ssh/sshd_config</file>
    <value>PermitRootLogin no</value>
    <mandatory>mandatory</mandatory>
  </control>
  <control>
    <id>mbss-rhel7-002</id>
    <description>Check for UID 0 only for root</description>
    <file>/etc/passwd</file>
    <value>UID 0 for root only</value>
    <mandatory>optional</mandatory>
  </control>
</controls>
----
#!/bin/bash

# Input XML file and output report file
rules_file="control_rules.xml"
output_file="compliance_report.csv"

# Generate CSV header
echo "Control ID,Description,File Affected,Value,Pass/Failed,Mandatory Status" > "$output_file"

# Function to extract content from a specific file
get_file_content() {
    local file=$1
    if [[ -f "$file" ]]; then
        cat "$file"
    else
        echo "File not found"
    fi
}

# Function to check compliance for a rule
check_compliance() {
    local file=$1
    local expected_value=$2

    case $file in
        "/etc/ssh/sshd_config")
            # Example: Check PermitRootLogin
            if echo "$expected_value" | grep -q "PermitRootLogin"; then
                current_value=$(grep -E "^PermitRootLogin" "$file" 2>/dev/null || echo "Not set")
                [[ "$current_value" == "$expected_value" ]] && echo "Pass" || echo "Fail"
            else
                echo "Fail"
            fi
            ;;
        "/etc/passwd")
            # Example: Check UID 0 only for root
            if [[ "$expected_value" == "UID 0 for root only" ]]; then
                non_root_uid0=$(awk -F: '$3 == 0 && $1 != "root"' "$file")
                [[ -z "$non_root_uid0" ]] && echo "Pass" || echo "Fail"
            else
                echo "Fail"
            fi
            ;;
        *)
            echo "File check not implemented"
            ;;
    esac
}

# Read and parse the XML
while IFS= read -r line; do
    if [[ $line == *"<control>"* ]]; then
        # Reset variables for each control
        control_id=""
        description=""
        file=""
        value=""
        mandatory=""
    elif [[ $line == *"<id>"* ]]; then
        control_id=$(echo "$line" | sed -n 's:.*<id>\(.*\)</id>.*:\1:p')
    elif [[ $line == *"<description>"* ]]; then
        description=$(echo "$line" | sed -n 's:.*<description>\(.*\)</description>.*:\1:p')
    elif [[ $line == *"<file>"* ]]; then
        file=$(echo "$line" | sed -n 's:.*<file>\(.*\)</file>.*:\1:p')
    elif [[ $line == *"<value>"* ]]; then
        value=$(echo "$line" | sed -n 's:.*<value>\(.*\)</value>.*:\1:p')
    elif [[ $line == *"<mandatory>"* ]]; then
        mandatory=$(echo "$line" | sed -n 's:.*<mandatory>\(.*\)</mandatory>.*:\1:p')
    elif [[ $line == *"</control>"* ]]; then
        # Check compliance for the current control
        if [[ -f "$file" ]]; then
            compliance=$(check_compliance "$file" "$value")
        else
            compliance="File not found"
        fi

        # Write result to CSV
        echo "\"$control_id\",\"$description\",\"$file\",\"$value\",\"$compliance\",\"$mandatory\"" >> "$output_file"
    fi
done < "$rules_file"

echo "Compliance report generated: $output_file"
--
<?xml version="1.0" encoding="UTF-8"?>
<controls>
  <control>
    <id>mbss-rhel7-003</id>
    <description>Check file permissions of /etc/passwd</description>
    <file>/etc/passwd</file>
    <expected_permission>644</expected_permission>
    <mandatory>mandatory</mandatory>
  </control>
</controls>
---
#!/bin/bash

# Input control file and output report file
control_file="file_permission_controls.xml"
output_file="file_permission_report.csv"

# Generate CSV header
echo "Control ID,Description,File Affected,Expected Permission,Actual Permission,Pass/Failed,Mandatory Status" > "$output_file"

# Function to check file permissions
check_permissions() {
    local file=$1
    local expected_perm=$2

    if [[ -e $file ]]; then
        # Get actual permissions in numeric format
        actual_perm=$(stat -c "%a" "$file")
        [[ "$actual_perm" == "$expected_perm" ]] && echo "Pass" || echo "Fail"
    else
        echo "File not found"
    fi
}

# Read and parse the XML control file
while IFS= read -r line; do
    if [[ $line == *"<control>"* ]]; then
        # Reset variables for each control
        control_id=""
        description=""
        file=""
        expected_permission=""
        mandatory=""
    elif [[ $line == *"<id>"* ]]; then
        control_id=$(echo "$line" | sed -n 's:.*<id>\(.*\)</id>.*:\1:p')
    elif [[ $line == *"<description>"* ]]; then
        description=$(echo "$line" | sed -n 's:.*<description>\(.*\)</description>.*:\1:p')
    elif [[ $line == *"<file>"* ]]; then
        file=$(echo "$line" | sed -n 's:.*<file>\(.*\)</file>.*:\1:p')
    elif [[ $line == *"<expected_permission>"* ]]; then
        expected_permission=$(echo "$line" | sed -n 's:.*<expected_permission>\(.*\)</expected_permission>.*:\1:p')
    elif [[ $line == *"<mandatory>"* ]]; then
        mandatory=$(echo "$line" | sed -n 's:.*<mandatory>\(.*\)</mandatory>.*:\1:p')
    elif [[ $line == *"</control>"* ]]; then
        # Check the permissions for the current control
        actual_permission=$(stat -c "%a" "$file" 2>/dev/null || echo "File not found")
        compliance=$(check_permissions "$file" "$expected_permission")

        # Write result to CSV
        echo "\"$control_id\",\"$description\",\"$file\",\"$expected_permission\",\"$actual_permission\",\"$compliance\",\"$mandatory\"" >> "$output_file"
    fi
done < "$control_file"

echo "File permission compliance report generated: $output_file"
