using System;
using System.IO;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Management;  // Requires Windows, add System.Management NuGet
using ICSharpCode.SharpZipLib.Zip;

class LaptopSpecUploader
{
    private static readonly HttpClient client = new HttpClient();

    // 1. Collect system specifications and save to file
    public static void SaveSystemInfo(string outputFolder)
    {
        Directory.CreateDirectory(outputFolder);
        string filePath = Path.Combine(outputFolder, "SystemInfo.txt");

        using var sw = new StreamWriter(filePath);

        // Basic environment info
        sw.WriteLine("=== Environment Info ===");
        sw.WriteLine($"Machine Name: {Environment.MachineName}");
        sw.WriteLine($"OS Version: {Environment.OSVersion}");
        sw.WriteLine($"64-bit OS: {Environment.Is64BitOperatingSystem}");
        sw.WriteLine($"Processor Count: {Environment.ProcessorCount}");
        sw.WriteLine($"CLR Version: {Environment.Version}");
        sw.WriteLine();

        // Hardware info via WMI
        sw.WriteLine("=== CPU Info ===");
        using (var searcher = new ManagementObjectSearcher("select * from Win32_Processor"))
        {
            foreach (var obj in searcher.Get())
            {
                sw.WriteLine($"Name: {obj["Name"]}");
                sw.WriteLine($"Cores: {obj["NumberOfCores"]}");
                sw.WriteLine($"Threads: {obj["NumberOfLogicalProcessors"]}");
            }
        }

        sw.WriteLine("\n=== RAM Info ===");
        using (var searcher = new ManagementObjectSearcher("select * from Win32_ComputerSystem"))
        {
            foreach (var obj in searcher.Get())
            {
                ulong ram = (ulong)obj["TotalPhysicalMemory"];
                sw.WriteLine($"Installed RAM: {ram / (1024 * 1024 * 1024)} GB");
            }
        }

        sw.WriteLine("\n=== Disk Info ===");
        using (var searcher = new ManagementObjectSearcher("select * from Win32_LogicalDisk where DriveType=3"))
        {
            foreach (var obj in searcher.Get())
            {
                sw.WriteLine($"Drive {obj["DeviceID"]}: {Convert.ToUInt64(obj["Size"]) / (1024 * 1024 * 1024)} GB total");
            }
        }

        sw.Close();
        Console.WriteLine($"System info saved to {filePath}");
    }

    // 2. Create password-protected zip from folder
    public static void CreatePasswordProtectedZip(string folderPath, string zipPath, string password)
    {
        using var fs = File.Create(zipPath);
        using var zipStream = new ZipOutputStream(fs);

        zipStream.SetLevel(9);
        zipStream.Password = password;

        foreach (string file in Directory.GetFiles(folderPath, "*", SearchOption.AllDirectories))
        {
            string relativePath = Path.GetRelativePath(folderPath, file);
            var entry = new ZipEntry(relativePath)
            {
                DateTime = File.GetLastWriteTime(file)
            };

            zipStream.PutNextEntry(entry);
            byte[] buffer = File.ReadAllBytes(file);
            zipStream.Write(buffer, 0, buffer.Length);
            zipStream.CloseEntry();
        }

        Console.WriteLine($"Created password-protected zip: {zipPath}");
    }

    public static async Task<string> UploadToGofile(string filePath)
    {
        // 1. Get list of servers
        var serverResponse = await client.GetStringAsync("https://api.gofile.io/servers");
        using var serverDoc = JsonDocument.Parse(serverResponse);
        string server = serverDoc.RootElement
            .GetProperty("data")
            .GetProperty("servers")[0]
            .GetProperty("name")
            .GetString();

        // 2. Upload file to the selected server
        string uploadUrl = $"https://{server}.gofile.io/uploadFile";
        using var content = new MultipartFormDataContent();
        using var fs = File.OpenRead(filePath);
        content.Add(new StreamContent(fs), "file", Path.GetFileName(filePath));

        var response = await client.PostAsync(uploadUrl, content);
        string json = await response.Content.ReadAsStringAsync();

        using var doc = JsonDocument.Parse(json);
        string? downloadUrl = doc.RootElement
            .GetProperty("data")
            .GetProperty("downloadPage")
            .GetString();

        return downloadUrl ?? "Upload failed";
    }


    // 4. Send notification to Telegram
    public static async Task SendTelegramMessage(string botToken, string chatId, string message)
    {
        string url = $"https://api.telegram.org/bot{botToken}/sendMessage";
        var payload = new FormUrlEncodedContent(new[]
        {
            new KeyValuePair<string,string>("chat_id", chatId),
            new KeyValuePair<string,string>("text", message)
        });

        await client.PostAsync(url, payload);
        Console.WriteLine("Telegram notification sent.");
    }

    // 5. Main workflow
    static async Task Main(string[] args)
    {
        string folderPath = "C:\\Temp\\LaptopSpecs";
        string zipPath = "C:\\Temp\\LaptopSpecs.zip";
        string password = "1234";

        string telegramBotToken = "TOKEN";
        string telegramChatId = "CHATID";

        // Step 1: Collect system specs
        SaveSystemInfo(folderPath);

        // Step 2: Zip folder with password
        CreatePasswordProtectedZip(folderPath, zipPath, password);

        // Step 3: Upload to AnonFiles
        string link = await UploadToGofile(zipPath);
        Console.WriteLine("AnonFiles link: " + link);

        // Step 4: Send Telegram notification
        string message = $"Laptop specs uploaded.\nDownload: {link}\nPassword: {password}";
        await SendTelegramMessage(telegramBotToken, telegramChatId, message);
    }
}
