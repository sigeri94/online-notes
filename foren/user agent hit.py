import re
import os
import gzip
import argparse
import geoip2.database
from collections import defaultdict
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed

# Static variable for the GeoLite2 City database path
GEOIP_DB_PATH = '/cygdrive/d/pelindo/GeoLite2-City.mmdb'

# Set up argument parser
parser = argparse.ArgumentParser(description='Parse Apache access logs and generate an HTML report of top user agents by total hits and associated IP addresses.')
parser.add_argument('log_files', nargs='+', help='Paths to the Apache access log files (can be .gz or plain text)')
args = parser.parse_args()

log_files = args.log_files

# Load the GeoLite2-City database
reader = geoip2.database.Reader(GEOIP_DB_PATH)

# Regex pattern to extract IP, time, URL, status code, and user agent
log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) - - \[(?P<time>.+?)\] "(?P<method>\S+) (?P<url>\S+) .+?" (?P<status>\d+) (?P<size>\d+) ".+?" "(?P<user_agent>.+?)"')

# Function to process a single log file
def process_log_file(log_file):
    user_agents_by_date = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))
    
    # Helper function to extract date in 'YYYY-MM-DD' format
    def extract_date(log_time):
        return datetime.strptime(log_time.split()[0], "%d/%b/%Y:%H:%M:%S").strftime("%Y-%m-%d")

    # Helper function to open gzipped or plain text log files
    def open_log_file(log_file):
        if log_file.endswith('.gz'):
            return gzip.open(log_file, 'rt')  # Open gzipped file in text mode
        else:
            return open(log_file, 'r')  # Open regular text file

    with open_log_file(log_file) as f:
        for line in f:
            match = log_pattern.match(line)
            if match:
                ip = match.group('ip')
                log_time = match.group('time')
                user_agent = match.group('user_agent')
                date = extract_date(log_time)
                status = match.group('status')

                # Only consider requests with HTTP status code 200
                if status == '200':
                    user_agents_by_date[date][user_agent][ip] += 1

    return user_agents_by_date

# Process log files concurrently
user_agents_by_date_combined = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))

with ThreadPoolExecutor(max_workers=5) as executor:
    future_to_file = {executor.submit(process_log_file, log_file): log_file for log_file in log_files}
    
    for future in as_completed(future_to_file):
        log_file = future_to_file[future]
        try:
            user_agents_by_date = future.result()
            # Combine results into user_agents_by_date_combined
            for date, user_agent_data in user_agents_by_date.items():
                for user_agent, ip_data in user_agent_data.items():
                    for ip, hits in ip_data.items():
                        user_agents_by_date_combined[date][user_agent][ip] += hits
        except Exception as exc:
            print(f'{log_file} generated an exception: {exc}')

# Sort dates in chronological order
sorted_dates = sorted(user_agents_by_date_combined.keys())

# Generate HTML content
html_content = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Top User Agents</title>
    <style>
        body {{
            font-family: 'Arial', sans-serif;
            background-color: #f7f9fc;
            color: #333;
            margin: 0;
            padding: 0;
        }}
        h1 {{
            background-color: #4b6584;
            color: white;
            padding: 20px;
            text-align: center;
        }}
        h2 {{
            color: #4b6584;
            margin: 20px;
        }}
        table {{
            width: 800px;
            margin: 0 auto 20px auto;
            border-collapse: collapse;
        }}
        th, td {{
            padding: 10px;
            border: 1px solid #ccc;
            text-align: left;
        }}
        th {{
            background-color: #f0f5f9;
            color: #4b6584;
        }}
        tr:nth-child(even) {{
            background-color: #f9f9f9;
        }}
        tr:hover {{
            background-color: #e3f2fd;
        }}
        .footer {{
            text-align: center;
            padding: 10px;
            background-color: #f0f5f9;
            margin-top: 20px;
        }}
    </style>
</head>
<body>
    <h1>Top 15 User Agents by Total Hits</h1>
    {date_sections}
    <div class="footer">
        <p>Generated by Apache Log Parser</p>
    </div>
</body>
</html>
"""

# Generate sections for each date
date_sections = ""

for date in sorted_dates:
    # Sort user agents by total hits in descending order and limit to the top 15
    sorted_user_agents = sorted(user_agents_by_date_combined[date].items(), key=lambda x: sum(x[1].values()), reverse=True)[:15]

    # Prepare rows for the HTML table
    user_agent_rows = ""
    for user_agent, ip_data in sorted_user_agents:
        total_hits = sum(ip_data.values())
        ip_list = ", ".join(ip_data.keys())  # Collect all associated IPs
        user_agent_rows += f"<tr><td>{user_agent}</td><td>{ip_list}</td><td>{total_hits}</td></tr>"

    # Add section for this date
    date_section = f"""
    <h2>Top 15 User Agents for {date}</h2>
    <table>
        <tr><th>User Agent</th><th>Associated IPs</th><th>Total Hits</th></tr>
        {user_agent_rows}
    </table>
    """
    
    date_sections += date_section

# Output filename based on the first log file's name
base_name = os.path.basename(log_files[0])
output_file_name = f"top_15_user_agents_by_date_{base_name}.html"

# Write to an HTML file
with open(output_file_name, 'w') as f:
    f.write(html_content.format(date_sections=date_sections))

# Close the GeoLite2 reader
reader.close()

print(f"HTML report '{output_file_name}' generated successfully.")
